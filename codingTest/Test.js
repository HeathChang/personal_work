const isInside = (point, polygon) => {
    const x = point[0];
    const y = point[1];
    let inside = false;
    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
        const xi = polygon[i][0];
        const yi = polygon[i][1];
        const xj = polygon[j][0];
        const yj = polygon[j][1];

        const intersect = yi > y !== yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;
        if (intersect) {
            inside = !inside;
        }
    }
    return inside;
};
// const pointToCheck = [-0.012399443151944689, 0.8059798635683418]; // 등
// const pointToCheck = [-0.024988273253988558, 0.93001187866568]; // 머리 > 두피
// const pointToCheck = [0.03827602586077, 0.9150884303001526]; // 머리 > 좌측귀
const pointToCheck = [0.04054481664172527, 0.9085696755810766]; // 머리 > 우측귀

// 범위값
const LEFT_ARM_RANGE = [
    [0.07075129807, 0.8502623438],
    [0.07075129807, 0.7749606045],
    [0.06339526084, 0.6636613993],
    [0.09187008703, 0.5531996546],
    [0.08497628646, 0.4447140974],
    [0.2030475085, 0.4447140974],
    [0.2030475085, 0.5549734513],
    [0.2030475085, 0.8502623438],
];
const RIGHT_ARM_RANGE = [
    [-0.07075129807, 0.8502623438],
    [-0.07075129807, 0.7749606045],
    [-0.06339526084, 0.6636613993],
    [-0.09187008703, 0.5531996546],
    [-0.08497628646, 0.4447140974],
    [-0.2030475085, 0.4447140974],
    [-0.2030475085, 0.5549734513],
    [-0.2030475085, 0.8502623438],
];
const RIGHT_LOWER_RANGE = [
    [0, 0.536389048],
    [0, 0.04229329645],
    [-0.0984691604, 0.04229329645],
    [-0.07028732821, 0.3445076024],
    [-0.09095170525, 0.5053926707],
    [-0.09187008702, 0.5531996545],
    [-0.08073509884, 0.6131440849],
    [-0.06994676873, 0.6131440849],
    [-0.02348357854, 0.5661567227],
];
const LEFT_LOWER_RANGE = [
    [0, 0.536389048],
    [0, 0.04229329645],
    [0.0984691604, 0.04229329645],
    [0.07028732821, 0.3445076024],
    [0.09095170525, 0.5053926707],
    [0.09187008702, 0.5531996545],
    [0.08073509884, 0.6131440849],
    [0.06994676873, 0.6131440849],
    [0.02348357854, 0.5661567227],
];
const GENITALIA_RANGE = [
    [-0.028277076377328736, 0.566156722653713],
    [-0.005313662740094871, 0.536389047988373],
    [0.005313662740094871, 0.536389047988373],
    [0.028277076377328736, 0.566156722653713],
];
const BODY_RANGE = [
    [-0.02244633818, 0.8809656452],
    [-0.08055845867, 0.8293203514],
    [-0.06339526083, 0.6636613993],
    [-0.06994676873, 0.6063824619],
    [-0.02348357854, 0.5661567227],
    [0.02348357854, 0.5661567227],
    [0.06994676873, 0.6063824619],
    [0.06339526083, 0.6636613993],
    [0.08055845867, 0.8293203514],
    [0.02244633818, 0.8809656452],
    [0, 0.8657289521],
];
const FACE_RANGE = [
    [0, 0.8645244883],
    [0.04691399596, 0.880965645151709],
    [0.04691399596, 1],
    [-0.04691399596, 1],
    [-0.04691399596, 0.880965645151709],
];

const ANT_RANGE = {};

const RANGE = {
    MALE: {
        A: {},
        P: {},
    },
    FEMALE: {
        A: {},
        P: {
            RIGHT_LOWER_RANGE: [
                [0, 0.6462384658],
                [0, 0.03257372637],
                [-0.0887656866, 0.03257372637],
                [-0.0887656866, 0.4386023833],
                [-0.09206527834, 0.555139176],
                [-0.06829013469, 0.6462384658],
            ],
            LEFT_LOWER_RANGE: [
                [0, 0.6462384658],
                [0, 0.03257372637],
                [0.0887656866, 0.03257372637],
                [0.0887656866, 0.4386023833],
                [0.09206527834, 0.555139176],
                [0.06829013469, 0.6462384658],
            ],
            RIGHT_ARM_RANGE: [
                [-0.06190349591, 0.8780549305],
                [-0.06190349591, 0.780985996],
                [-0.06717179537, 0.6633151233],
                [-0.09206527834, 0.555139176],
                [-0.0887656866, 0.4386023833],
                [-0.1655502689, 0.4386023833],
                [-0.1655502689, 0.8780549305],
            ],
            LEFT_ARM_RANGE: [
                [0.06190349591, 0.8780549305],
                [0.06190349591, 0.780985996],
                [0.06717179537, 0.6633151233],
                [0.09206527834, 0.555139176],
                [0.0887656866, 0.4386023833],
                [0.1655502689, 0.4386023833],
                [0.1655502689, 0.8780549305],
            ],
            BODY_RANGE: [
                [0.02244633818, 0.8809656452],
                [0.06190349591, 0.8559646073],
                [0.06717179537, 0.6633151233],
                [0.06829013469, 0.6462384658],
                [-0.06829013469, 0.6462384658],
                [-0.06190349591, 0.6633151233],
                [-0.06190349591, 0.8559646073],
                [-0.02244633818, 0.8809656452],
            ],
            FACE_RANGE: [
                [0.02244633818, 0.8809656452],
                [-0.02244633818, 0.8809656452],
                [-0.05849877228, 0.907593068],
                [-0.05849877228, 0.9854483673],
                [0.05849877228, 0.9854483673],
                [0.05849877228, 0.907593068],
            ],
        },
    },
};

// 변수 설정
// bodyParts 정의
let bodyPartsEnum = {};
let isFront = pointToCheck[2] === null && pointToCheck[2] === undefined && pointToCheck[2] >= 0 ? "A" : "P"; // 앞뒤 구분
let isLeft = isFront === "A" ? pointToCheck[0] >= 0 : pointToCheck[0] === 0 ;
let isGender = "FEMALE";

// 대분류
let rangePart = "";
// 실제 부위
let bodyPart = "";

console.log("isFront >> A는 정면, P는 후면 >>> ", isFront);
console.log("isLEFT >> ", isLeft);

// 부위
/// 얼굴
const BODY_PARTS = {
    A: {},
    P: {},
};


const rangeEnum = {
    FACE: RANGE?.[isGender]?.[isFront]?.FACE_RANGE,
    LEFT_ARM: RANGE?.[isGender]?.[isFront]?.LEFT_ARM_RANGE,
    RIGHT_ARM: RANGE?.[isGender]?.[isFront]?.RIGHT_ARM_RANGE,
    BODY: RANGE?.[isGender]?.[isFront]?.BODY_RANGE,
    RIGHT_LOWER: RANGE?.[isGender]?.[isFront]?.RIGHT_LOWER_RANGE,
    LEFT_LOWER: RANGE?.[isGender]?.[isFront]?.LEFT_LOWER_RANGE,
};

Object.freeze(rangeEnum);


// 1. 위치 분류
for (let i = 0; i <= Object.keys(rangeEnum).length; i++) {
    if (isInside(pointToCheck, Object.values(rangeEnum)[i])) {
        rangePart = Object.keys(rangeEnum)[i];
        break;
    }
}
console.log("rangePart >> ", rangePart);

const lhsear = [
    [0.03859993317, 0.9205451155],
    [0.03256337877, 0.8976420545],
    [0.05849877228, 0.8976420545],
    [0.05849877228, 0.9205451155]
]
// const pointToCheck = [-0.04054481664172527, 0.9085696755810766]; // 머리 > 우측귀

const rhsear = [
    [-0.0346071176422472, 0.9205451155],
    [-0.0319330125334381, 0.8976420545],
    [-0.05849877228, 0.8976420545],
    [-0.05849877228, 0.9205451155]
]
const scalp = [
    [0.02244633818, 0.8809656452],
    [-0.02244633818, 0.8809656452],
    [-0.03256337877, 0.8976420545],
    [-0.03859993317, 0.9205451155],
    [-0.05849877228, 0.9854483673],
    [0.05849877228, 0.9854483673],
    [0.03859993317, 0.9205451155],
    [0.03256337877, 0.8976420545]
];


// 1. 성별 구분 > 남자일때
if (isGender === "MALE") {
    if (isFront === "A") {
        // 2. 앞뒤 구분 > 정면일때


    } else if (isFront === "P") {
        // 2. 앞뒤 구분 > 후면일때
        console.log("Hello World");
    }
    // 1. 성별 구분 > 여자일때
} else if (isGender === "FEMALE") {
    if (isFront === "A") {
        // 2. 앞뒤 구분 > 정면일때


    } else if (isFront === "P") {
        // 2. 앞뒤 구분 > 후면일때
        if(rangePart === "FACE"){
            if (isLeft) {
                bodyPartsEnum.LHSEAR = lhsear;
            } else if (!isLeft) {
                bodyPartsEnum.RHSEAR = rhsear;
            }
            bodyPartsEnum = {
                ...bodyPartsEnum,
                scalp: scalp,
            };
        }
    }
}
Object.freeze(bodyPartsEnum);

if (Object.keys(bodyPartsEnum).length > 0) {
    for (let i = 0; i <= Object.keys(bodyPartsEnum).length; i++) {
        console.log(123, i, Object.keys(bodyPartsEnum)[i])
        if (isInside(pointToCheck, Object.values(bodyPartsEnum)[i])) {
            console.log(11111, Object.keys(bodyPartsEnum)[i])
            bodyPart = Object.keys(bodyPartsEnum)[i];
            break;
        }
    }
    console.log(`부위 [${rangePart}] 이며, 파트는 [${bodyPart}]`);
}


