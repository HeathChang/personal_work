import UIKit

// Our first function
func printDashes() {
    print("----------------")
}


// variables are mutable
// let is immutable and var is mutable
var greeting: String = "Hello, playground"
var likeHummus: String = "likes Hummus"
var name:String = "Heath"

print(0, greeting);
greeting = likeHummus;
print(1, greeting);
greeting = "Heath " + greeting; // + always need space, otherwise compiler treat it as a unary operators (negative / positive )
print(2, greeting);
greeting = name + " " + greeting; // + always need space, otherwise compiler treat it as a unary operators (negative / positive )
print(3, greeting);

print("----------------")



let listOfPeople = ["Ron","Jane","Bob"];

for name in listOfPeople {
    // String interpolation
    print("\(name) \(likeHummus).")
}

print("----------------")
// Scope
greeting = "\(name) likes to skateboard.";
print(greeting);
print("----------------")
// List<String> => [String]

let names:[String] = [
    "Ron","Elmo","cookie","big bird","grover","oscar"
];

for name in names {
    print("\(name) likes to skateboard.")
}
print("----------------")
// Struct:
// memberwise initializer: generated by the compiler and allows you to initialize all the properties of the struct in a convenient way.
struct PersonWithHobby{
    let name: String
    let hobby: String
}

let people: [PersonWithHobby] = [
    PersonWithHobby(
        name: "ron",
        hobby: "skateboard"),
    PersonWithHobby(
        name: "Elmo",
        hobby: "program"),
    PersonWithHobby(
        name: "cookie",
        hobby: "bake"),
    PersonWithHobby(
        name: "big bird",
        hobby: "fly"),
    PersonWithHobby(
        name: "grover",
        hobby: ""),
    PersonWithHobby(
        name: "oscar",
        hobby: "")
];


for person in people{
    print("\(person.name.capitalized) likes to \(person.hobby).")
}

print("----------------")

// Introduce optionals
var x: Int = 7 // only Int
var y: Int? = 10 // Int + nil

x = 12345
y = 12345
y = -18
y = nil

print("----------------")

struct PersonWithOptHobby {
    let name: String
    let hobby: String?
}

let people2: [PersonWithOptHobby] = [
    PersonWithOptHobby(
        name: "ron",
        hobby: "skateboard"),
    PersonWithOptHobby(
        name: "Elmo",
        hobby: "program"),
    PersonWithOptHobby(
        name: "cookie",
        hobby: "bake"),
    PersonWithOptHobby(
        name: "big bird",
        hobby: "fly"),
    PersonWithOptHobby(
        name: "grover",
        hobby: nil),
    PersonWithOptHobby(
        name: "oscar",
        hobby: nil)
];

for p in people2 {
    if p.hobby == nil {
        print("\(p.name) has no hobby.")
    } else {
        print("\(p.name.capitalized) likes to \(p.hobby!).")

    }
}
print("----------------")

for p in people2 {
    if let hobby = p.hobby {
        // Executed if p.hobby != nil
        print("\(p.name.capitalized) likes to \(hobby).")
    } else {
        print("\(p.name.capitalized) has no hobby.")
    }
}
