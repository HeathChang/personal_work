Docker
==================================================================================================

Thu Jul 28, 2022
1. Ep2. What is Docker?
-Docker: A tool for creating and managing containers;
-Containers: A standardized unit of SW which will yield the same output;
           : running instance of images
2. Ep3. Why need independent application packages ? (skip from Ep 3 ~ 17)
- same environment

==================================================================================================

Sat Jul 30, 2022 (Ep18~ )
1. Ep18. Images and Containers
- Images: Blueprints for  containers (code + tools) which can be used to create multiple containers

==================================================================================================

Sun Jul 31, 2022 (Ep21~)
1. Ep21.
- [ FROM ] : Build your image up on the other image.
- [ WORKDIR ] :
    - WORKDIR /app : all the subsequent files will be executed from inside the folder.
                   : by setting WORKDIR, you can delete second dot of COPY . .
- [ COPY . . ] :
    - first dot: tell docker all the sub folders in the project should be copied to the image
    - second dot: the path inside the image where those files should be stored
- [ COPY package.json . ] :
- [ RUN npm install ]  : install all the dependencies
- [ EXPOSE 3000 ] : since the docker container is isolated from  local  env, need own internal network
- [ CMD [ "node", "app.mjs" ] ]: run when a container is started based on the image

2. Ep23: Image is read-only
- Images are basically locked and finished once you built them.
- Need to rebuild the image to pick up external changes

3. Ep25: Understanding Image Layer
- 기존 Source Code 변경하고 Build 시, npm install 까지 re-run 되었음.
- Copy package.json 을 한 후에, Run npm install, 그 후, Copy . /App 을 하면 , npm install 이후에 subsequent files를 복사함으로,
  Source Code가 변경 되더라도 npm install re-run 될 필요는 없음. ( 결과, 더 빠름 )

    Before
    => [3/5] COPY package.json /app                                                                                     0.1s
    => [4/5] RUN npm install                                                                                            8.5s
    => [5/5] COPY . /app                                                                                                0.0s

   After
   => CACHED [2/5] WORKDIR /app                                                                                        0.0s
   => CACHED [3/5] COPY package.json /app                                                                              0.0s
   => CACHED [4/5] RUN npm install                                                                                     0.0s

4. Ep28: Image and Container Management
- Docker run vs Docker start :
    -docker start don't block terminal(detached) vs  docker run block terminal (attached)
    -> attached here means that we are listening to the output of containers
==================================================================================================
Mon Aug 1, 2022
1. Ep.31
- Docker also can be used in simple utility application
2. Ep.32 docker rm && docker rmi && docker container prune
3. Ep.35 Copy files
    local -> docker : HyunsoocBookAir:002_Docker(withNode) heath$ docker cp ../dummy/. elastic_aryabhata:/test
    docker -> local : HyunsoocBookAir:002_Docker(withNode) heath$ docker cp elastic_aryabhata:/test dummy
4. Ep.36 Setting name
    container : docker run -p 3000:80 -d --name goalsapp --rm a8e10430f54
    image:

==================================================================================================
Tue Aug 2, 2022
1. Ep38. push Docker Hub
- after setting the repo name same with docker hub name, docker push jannhyunsoo/docker101

2. Ep39. Pull Docker Hub
- docker pull jannhyunsoo/docker101


3. Ep41. Data Management
- Types of Data
    -> Application (Code + Environment) -> Fixed & Read Only
    -> Temporary App Data ( Fetch/Produced in running container) -> Stored in memory and cleared regualry
    -> Permanent App Data ( Fetch/Produced in running container ) -> store in DB

==================================================================================================
Wed Aug 10, 2022

1. Ep45
- Important: There is no connection between container / image and my local file system.

2. Ep46
- using --rm in docker run will remove the container thus remove files created within
:  this is because the image is read only
:  the file is generated in the container doesn't write file into image
: it writes in its own read-write layer(which is added on top)
-> way to solve this is using volume

3. Ep. 47 Volumes
- Volumes help us with persisting data
- Volumes are folders on your host machine hard drive which are mounted into containers
- Volumes persist if a container shuts down

4. Ep. 48 Volumes 2
[DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
- This happens because rename method does not work if the file gets moved across multiple devices
==================================================================================================
Thu Aug 11, 2022
Two Type of External Data Storage

1. Ep. 49 Named Volumes
-anonymous volume is removed when the container shut down.
-name volume: defined path in the container is mapped to the created volume.
            : named volume will survive ( but should not be edited)
-docker run -p 3000:80 -d --name feedback-app -v feedback: /app/feedback  --rm feedback-node:volumes

2. Ep.51 Bind Mount
- change in code will not affect the running container ( => container )
- But, such changes should be reflected.
- Bind Mount can be used in persisted, editable data
- I can define a folder/path on your host machine (whereas Volumes are managed by Docker )
- docker run -p 3000:80 -d --name feedback-app -v feedback:/app/feedback  -v "/Users/heath/Desktop/Personal Coding/personal_work/Docker/004_Docker(useData):/app"  --rm feedback-node:volumes
- file path => "%cd%"
-> Error Occurred

3. Ep.52 Bind Mount Error
- Local Data (Bind mount folder content) overwrite the node modules
- need to tell Docker that there are certain parts in its internal file system that should not be overwritten.
-> using anonymous volume can solve the issue (외부 경로보다 컨테이너 내부 경로의 우선순위를 높이는 데 사용 가능)
- docker run -p 3000:80 -d --name feedback-app -v feedback:/app/feedback  -v "/Users/heath/Desktop/Personal Coding/personal_work/Docker/004_Docker(useData):/app"  -v  /app/node_modules  --rm  feedback-node:volumes
- docker  rules, specific path win so /app/node_modules overwrite non-existent node modules folder.

==================================================================================================
Fri Aug 12, 2022
1. Ep 56 Read only Volumes
- docker run -p 3000:80 -d --name feedback-app -v feedback:/app/feedback  -v "/Users/heath/Desktop/Personal Coding/personal_work/Docker/004_Docker(useData):/app:ro"  -v /app/temp -v /app/node_modules   --rm  feedback-node:volumes

2. Ep 61 Arguments & Environment
- Docker supports build-time Arguments and runtime Environment variables
- Arguments: Available inside dockerfile, not accessible in CMD or any application code. (set an image build via --build-arg)
- Environment: Available inside dockerfile, in application code. ( Set Via Dockerfile or docker run)
- docker run -p 3000:8000 -d --env PORT=8000  --name feedback-app -v feedback:/app/feedback  -v "/Users/heath/Desktop/Personal Coding/personal_work/Docker/004_Docker(useData):/app:ro"  -v /app/temp -v /app/node_modules   --rm  feedback-node:env
- docker run -p 3000:8000 -d --env-file ./.env   --name feedback-app -v feedback:/app/feedback  -v "/Users/heath/Desktop/Personal Coding/personal_work/Docker/004_Docker(useData):/app:ro"  -v /app/temp -v /app/node_modules   --rm  feedback-node:env

3. Ep 63 ARG
- docker build -t feedback-no  de:dev --build-arg DEFAULT_PORT=8000 .

==================================================================================================
Tue Aug 16, 2022
1. Ep66~ 69. Three types of Communication.
- 1. Sending HTTP request to a website
- 2. sth in our machine which we want to communicate to from inside our app
- 3. between containers. every container should do one main thing.

2. Ep70 ~ 71. Demo App
-  Error response from daemon: Conflict. The container name "/favorites" is already in use by container "e911c3a3eab965f3ad35dd0cd49b08b8efc83bd52353eb8e85a95f43e68b278b". You have to remove (or rename) that container to be able to reuse that name.
- failed app.js due to app.js

==================================================================================================
Wed Aug 17, 2022
1. Ep.72 Connecting to Internal.
- 'mongodb://host.docker.internal:27017/favorites',

2. Ep. 73 Container to container
- 1. make another docker container(mongoDB)
-> docker run -d --name mongodb mongo : will create new container based on mongoDB image
- 2. docker container inspect mongodb check IP address  and change host.docker.internal to IP address

==================================================================================================
Thu Aug 18,2022
1. Ep 74. Network
- docker run --network my_network: multiple isolated containers can talk to each other
- docker run -d --name mongodb --network favorites-net mongo : wont work
=> docker will not automatically create this.
- docker network create favorites-net: will automatically create network
- docker run -d --name mongodb --network favorites-net mongo : will work
- docker run --name favorites --network favorites-net  -d --rm -p 3000:3000 favorites-node

2. Ep75. communicate with object
- docker will not replace your source code. it will simply detects outgoing request and resolves the IP
- Instead, docker owns the Environment in which your application runs and when request leaves the container, dockers will resolve the address

==================================================================================================
Sun Aug 21, 2022
1. Ep80~
- 1. start DB. docker run --name mongodb --rm -d mongo
 => by default, mongodb will export 27017 as default port
 => docker run --name mongodb --rm -d -p 27017:270717 mongo
 => data in mongodb is basically local node application
CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS         PORTS                      NAMES
d99943afdb63   mongo     "docker-entrypoint.s…"   11 seconds ago   Up 9 seconds   0.0.0.0:27017->27017/tcp   mongodb

2. Ep82 Backend
- need to dockerized the file to build our own image for the project, since the file is custom
- docker build -t goals-node .
- docker run --name goals-backend --rm goals-node
=> this will fail because, mongodb is a container exposing its port, but in the dockerized backend app, its reaching out to local host.
- need to change mongo config:   'mongodb://host.docker.internal:27017/course-goals'
=> special address/identifier which is translated to your real local host machine IP
-Now connected to mongoDB, but now react app cannot access to backend & database.
- docker run --name goals-backend --rm -d -p 80:80 goals-node

==================================================================================================
Mon Aug 22, 2022
1. Ep 83. Frontend (With ReactJS)
- After setting Dockerfile,
    docker run --name goals-frontend --rm -d -p 3000:3000 goals-react
=> this fails, because need to set interactive (links with project)
- docker run --name goals-frontend --rm -p 3000:3000 -it  goals-react

2. Ep 84. Setting up network
- docker network create goals-net
- mongo:
    => docker run --name mongodb --rm -d --network goals-net mongo
- back:
    => docker run --name goals-backend --rm -d --network goals-net goals-node
    -> fails because, mongodb is connected to host docker internal => need to change to mongodb
- front
    - need to change app.js in front-end
    - needs to change address => goals-backend
    docker run --name goals-frontend --rm --network goals-net -p 3000:3000 -it  goals-react
    - front -> starts a development server,which serve basic  the basic react application
    - The react code is not executed inside the container ( but runs in browser)
    => React run in the browser, not on the server (dont need to change to goals-backend)
    => doen not care of network, the part interact with API is not executed in the docker environment

    - working separately by setting backend -p 80:80 && --network goals-net
    => docker run --name goals-frontend --rm -p 3000:3000 -it  goals-react
    => docker run --name goals-backend --rm -d --network goals-net -p 80:80 goals-node

==================================================================================================
Tue Aug 23, 2022
1. Ep. 85: tear down data by volume and setting env variables
- docker run --name mongodb -v data:/data/db  --rm -d --network goals-net mongo
- docker run --name mongodb -v data:/data/db --rm -d --network goals-net -e MONGO_INITDB_ROOT_USERNAME=heath -e MONGO_INITDB_ROOT_PASSWPRD=secret mongo

- After setting ID & PW in apps.js in backend => fails (needs special command in app.js MongoDB connection)
- 'mongodb://heath:secret@mongodb:27017/course-goals?authSource=admin',
- rebuild and run: docker build -t goals-backend . (auth error -> docker volume rm data)

2. Ep.86: hot-reload and data persist
- docker run --name goals-backend -v logs:/app/logs -v "/Users/heath/Desktop/Personal Coding/personal_work/Docker/006_Docker_multiContain
  ers/backend:/app" -v /app/node_modules --rm --network goals-net -d -p 80:80 goals-node
- use nodemon => rebuild (  "devDependencies": {
                              "nodemon": "^2.0.4"
                             })

3. Ep.87: Front-end
docker run -v "/Users/heath/Desktop/Personal Coding/personal_work/Docker/006_Docker_multiContainers/frontend/src:/app/src"  --name goals-frontend --rm -p 3000:3000 -it  goals-react

==================================================================================================
Thu Aug 25, 2022
1. Docker Compose
    : tools that allows you to replace multiple docker build and docker run
    : one configuration file which will leverage the config file and which will bring up or down entire application.
    : docker compose is not suited for managing multiple containers on different hosts/machine
2. Ep 95. Docker Compose Up
- docker-compose up // docker-compose -d : building and pulling all images + start container
- docker-compose down: will shuts down all containers and network, but not volumes.
- to shuts down everything + volume => docker-compose down -v
==================================================================================================
Wed Aug 31, 2022
1. Docker Utilities Containers: dnt include app
- docker run -it node
- docker exec : allows you to execute certain commands inside running container besides the default command
- docker run -it node npm init
- docker run -it -v "/Users/heath/Desktop/Personal Coding/personal_work/Docker/008_Docker_Utilities:/app" node-util npm init
 => effect on host machine
- ENTRYPOINT will appened after the entry point
=> docker run -it -v "/Users/heath/Desktop/Personal Coding/personal_work/Docker/008_Docker_Utilities:/app" mynpm install
- docker-compose run  npm init::: allows us to run single service.

2. Intro to Deploy.
- Things to watch out
-> Bind Mounts should not be used in production
-> containerized apps might need a build step
-> multi-container projects might need to split
-> tradeoffs between control and responsibility.

==================================================================================================
 Mon Sep 5, 2022
 1. Intro to Deployment.
 - EC2 is a service offered bby AWS, which allows you to spin up your own remote hosting machine.
 - Steps:
    1. Create and launch EC2 instance, VPC and security group (who has access to this instance)
    2. Configure security group to expose all required ports to SSW.
    3. Connect to instance SSH, install Docker and run container.
 2. Difference in volume between development and production.
 -> In Development
 - Containers should encapsulate the runtime environment but not necessarily the code
 - Use Bind Mounts to provide your local host project filesd to the running container.
 -> In Production
 - container should really work stand-alone, you should not have source code on your remote machine.
 - copy a code snapshot into the image.
 3. deploy onto a web-server.
==================================================================================================
Tue Sep 6, 2022
1. AWS
- SSH : Secure Shell
        - protocol for connecting to a remote machine from your local machine via the command line or terminal you have.
- chmod 400 example-1.pem
- ssh -i "example-1.pem" ec2-user@ec2-13-125-223-28.ap-northeast-2.compute.amazonaws.com

2. Install Docker (steps)
- sudo yum update -y: to update essential packages
- sudo amazon-linux-extras install docker : install docker in vm
- sudo service docker start : execute docker as root user
==================================================================================================
Sat Sep 10, 2022_ How to deploy a dockerized app to an EC2 instance

1. Ep. 132: Local -push> Cloud
- Need to bring our local image onto remote machine.

- 1. Deploy source (copy and build on remote)
: Build image on remote machine;
: push source code to remote machine;
: Run Docker build and the docker run;
-> Unnecessary complexity

- 2. Deploy Built Image
: Build Image before deployment(on local machine)
: Just execute docker run
-> Avoid unnecessary remote server work.

- Way to Push to Docker Hub.
-> 1. Build Image
docker build --platform linux/amd64 -t node-dep-example-1 .
-> 2. docker tag node-dep-example-1 jannhyunsoo/node-example-1
-> 3. docker push jannhyunsoo/node-example-1
=> Now locally bulit image is pushed to Docker hub.

2. Ep. 133: Start App
- docker pull jannhyunsoo/node-example-1:latest
- docker run -d --rm -p 80:80 jannhyunsoo/node-example-1
- sudo docker run -d --rm -p 80:80 jannhyunsoo/node-example-1
- (에러 노트,Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.40/containers/json?all=1: dial unix /var/run/docker.sock: connect: permission denied)
    => sudo chmod 666 /var/run/docker.sock
    => https://github.com/occidere/TIL/issues/116
- (에러 노트: WARNING: The requested image's platform (linux/arm64/v8) does not match the detected host platform (linux/amd64) and no specific platform was requested standard_init_linux.go:228: exec user process caused: exec format error)
    => 해당 경우: m1과 ec2 서버와의 호환성 문제. --platform amd64 를 build시 추가.
    => https://sas-study.tistory.com/425
- Security Group:
    -> InBound : allowed from somewhere this instance is opened (SSH)
    -> OutBound : controls which traffic is allowed from the instance queue

3. Ep. 134: Containers/Images Update
=> docker does not check if there is more-up-to-date remote image
- Docker rebuild & tag & push: 009_Docker_Deploy % docker build --platform amd64 -t node-dep-example-1 .
- Docker pull:  sudo docker pull jannhyunsoo/node-example-1:latest
- Docker run: sudo docker run -d --rm -p 80:80 jannhyunsoo/node-example-1
   => Be careful of tag when build & push
