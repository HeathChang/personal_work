Docker
==================================================================================================

Thu Jul 28, 2022
1. Ep2. What is Docker?
-Docker: A tool for creating and managing containers;
-Containers: A standardized unit of SW which will yield the same output;
           : running instance of images
2. Ep3. Why need independent application packages ? (skip from Ep 3 ~ 17)
- same environment

==================================================================================================

Sat Jul 30, 2022 (Ep18~ )
1. Ep18. Images and Containers
- Images: Blueprints for  containers (code + tools) which can be used to create multiple containers

==================================================================================================

Sun Jul 31, 2022 (Ep21~)
1. Ep21.
- [ FROM ] : Build your image up on the other image.
- [ WORKDIR ] :
    - WORKDIR /app : all the subsequent files will be executed from inside the folder.
                   : by setting WORKDIR, you can delete second dot of COPY . .
- [ COPY . . ] :
    - first dot: tell docker all the sub folders in the project should be copied to the image
    - second dot: the path inside the image where those files should be stored
- [ COPY package.json . ] :
- [ RUN npm install ]  : install all the dependencies
- [ EXPOSE 3000 ] : since the docker container is isolated from  local  env, need own internal network
- [ CMD [ "node", "app.mjs" ] ]: run when a container is started based on the image

2. Ep23: Image is read-only
- Images are basically locked and finished once you built them.
- Need to rebuild the image to pick up external changes

3. Ep25: Understanding Image Layer
- 기존 Source Code 변경하고 Build 시, npm install 까지 re-run 되었음.
- Copy package.json 을 한 후에, Run npm install, 그 후, Copy . /App 을 하면 , npm install 이후에 subsequent files를 복사함으로,
  Source Code가 변경 되더라도 npm install re-run 될 필요는 없음. ( 결과, 더 빠름 )

    Before
    => [3/5] COPY package.json /app                                                                                     0.1s
    => [4/5] RUN npm install                                                                                            8.5s
    => [5/5] COPY . /app                                                                                                0.0s

   After
   => CACHED [2/5] WORKDIR /app                                                                                        0.0s
   => CACHED [3/5] COPY package.json /app                                                                              0.0s
   => CACHED [4/5] RUN npm install                                                                                     0.0s

4. Ep28: Image and Container Management
- Docker run vs Docker start :
    -docker start don't block terminal(detached) vs  docker run block terminal (attached)
    -> attached here means that we are listening to the output of containers
==================================================================================================
Mon Aug 1, 2022
1. Ep.31
- Docker also can be used in simple utility application
2. Ep.32 docker rm && docker rmi && docker container prune
3. Ep.35 Copy files
    local -> docker : HyunsoocBookAir:002_Docker(withNode) heath$ docker cp ../dummy/. elastic_aryabhata:/test
    docker -> local : HyunsoocBookAir:002_Docker(withNode) heath$ docker cp elastic_aryabhata:/test dummy
4. Ep.36 Setting name
    container : docker run -p 3000:80 -d --name goalsapp --rm a8e10430f54
    image:

==================================================================================================
Tue Aug 2, 2022
1. Ep38. push Docker Hub
- after setting the repo name same with docker hub name, docker push jannhyunsoo/docker101

2. Ep39. Pull Docker Hub
- docker pull jannhyunsoo/docker101


3. Ep41. Data Management
- Types of Data
    -> Application (Code + Environment) -> Fixed & Read Only
    -> Temporary App Data ( Fetch/Produced in running container) -> Stored in memory and cleared regualry
    -> Permanent App Data ( Fetch/Produced in running container ) -> store in DB

==================================================================================================
Wed Aug 10, 2022

1. Ep45
- Important: There is no connection between container / image and my local file system.

2. Ep46
- using --rm in docker run will remove the container thus remove files created within
:  this is because the image is read only
:  the file is generated in the container doesn't write file into image
: it writes in its own read-write layer(which is added on top)
-> way to solve this is using volume

3. Ep. 47 Volumes
- Volumes help us with persisting data
- Volumes are folders on your host machine hard drive which are mounted into containers
- Volumes persist if a container shuts down

4. Ep. 48 Volumes 2
[DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
- This happens because rename method does not work if the file gets moved across multiple devices
==================================================================================================
Thu Aug 11, 2022
Two Type of External Data Storage

1. Ep. 49 Named Volumes
-anonymous volume is removed when the container shut down.
-name volume: defined path in the container is mapped to the created volume.
            : named volume will survive ( but should not be edited)
-docker run -p 3000:80 -d --name feedback-app -v feedback: /app/feedback  --rm feedback-node:volumes

2. Ep.51 Bind Mount
- change in code will not affect the running container ( => container )
- But, such changes should be reflected.
- Bind Mount can be used in persisted, editable data
- I can define a folder/path on your host machine (whereas Volumes are managed by Docker )
- docker run -p 3000:80 -d --name feedback-app -v feedback:/app/feedback  -v "/Users/heath/Desktop/Personal Coding/personal_work/Docker/004_Docker(useData):/app"  --rm feedback-node:volumes
- file path => "%cd%"
-> Error Occurred

3. Ep.52 Bind Mount Error
- Local Data (Bind mount folder content) overwrite the node modules
- need to tell Docker that there are certain parts in its internal file system that should not be overwritten.
-> using anonymous volume can solve the issue (외부 경로보다 컨테이너 내부 경로의 우선순위를 높이는 데 사용 가능)
- docker run -p 3000:80 -d --name feedback-app -v feedback:/app/feedback  -v "/Users/heath/Desktop/Personal Coding/personal_work/Docker/004_Docker(useData):/app"  -v  /app/node_modules  --rm  feedback-node:volumes
- docker  rules, specific path win so /app/node_modules overwrite non-existent node modules folder.

==================================================================================================
Fri Aug 12, 2022
1. Ep 56 Read only Volumes
- docker run -p 3000:80 -d --name feedback-app -v feedback:/app/feedback  -v "/Users/heath/Desktop/Personal Coding/personal_work/Docker/004_Docker(useData):/app:ro"  -v /app/temp -v /app/node_modules   --rm  feedback-node:volumes

2. Ep 61 Arguments & Environment
- Docker supports build-time Arguments and runtime Environment variables
- Arguments: Available inside dockerfile, not accessible in CMD or any application code. (set an image build via --build-arg)
- Environment: Available inside dockerfile, in application code. ( Set Via Dockerfile or docker run)
- docker run -p 3000:8000 -d --env PORT=8000  --name feedback-app -v feedback:/app/feedback  -v "/Users/heath/Desktop/Personal Coding/personal_work/Docker/004_Docker(useData):/app:ro"  -v /app/temp -v /app/node_modules   --rm  feedback-node:env
- docker run -p 3000:8000 -d --env-file ./.env   --name feedback-app -v feedback:/app/feedback  -v "/Users/heath/Desktop/Personal Coding/personal_work/Docker/004_Docker(useData):/app:ro"  -v /app/temp -v /app/node_modules   --rm  feedback-node:env

3. Ep 63 ARG
- docker build -t feedback-no  de:dev --build-arg DEFAULT_PORT=8000 .

==================================================================================================
Tue Aug 16, 2022
1. Ep66~ 69. Three types of Communication.
- 1. Sending HTTP request to a website
- 2. sth in our machine which we want to communicate to from inside our app
- 3. between containers. every container should do one main thing.

2. Ep70 ~ 71. Demo App
-  Error response from daemon: Conflict. The container name "/favorites" is already in use by container "e911c3a3eab965f3ad35dd0cd49b08b8efc83bd52353eb8e85a95f43e68b278b". You have to remove (or rename) that container to be able to reuse that name.
- failed app.js due to app.js

==================================================================================================
Wed Aug 17, 2022
1. Ep.72 Connecting to Internal.
- 'mongodb://host.docker.internal:27017/favorites',

2. Ep. 73 Container to container
- 1. make another docker container(mongoDB)
-> docker run -d --name mongodb mongo : will create new container based on mongoDB image
- 2. docker container inspect mongodb check IP address  and change host.docker.internal to IP address

==================================================================================================
Thu Aug 18,2022
1. Ep 74. Network
- docker run --network my_network: multiple isolated containers can talk to each other
- docker run -d --name mongodb --network favorites-net mongo : wont work
=> docker will not automatically create this.
- docker network create favorites-net: will automatically create network
- docker run -d --name mongodb --network favorites-net mongo : will work
- docker run --name favorites --network favorites-net  -d --rm -p 3000:3000 favorites-node

2. Ep75. communicate with object
- docker will not replace your source code. it will simply detects outgoing request and resolves the IP
- Instead, docker owns the Environment in which your application runs and when request leaves the container, dockers will resolve the address

==================================================================================================
Sun Aug 21, 2022
1. Ep80~
- 1. start DB. docker run --name mongodb --rm -d mongo
 => by default, mongodb will export 27017 as default port
 => docker run --name mongodb --rm -d -p 27017:270716
 => data in mongodb is basically local node application
CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS         PORTS                      NAMES
d99943afdb63   mongo     "docker-entrypoint.s…"   11 seconds ago   Up 9 seconds   0.0.0.0:27017->27017/tcp   mongodb

2. Ep82 Backend
- need to dockerized the file to build our own image for the project, since the file is custom
- docker build -t goals-node .
- docker run --name goals-backend --rm goals-node
=> this will fail because, mongodb is a container exposing its port, but in the dockerized backend app, its reaching out to local host.
- need to change mongo config:   'mongodb://host.docker.internal:27017/course-goals'
=> special address/identifier which is translated to your real local host machine IP
-Now connected to mongoDB, but now react app cannot access to backend & database.
- docker run --name goals-backend --rm -d -p 80:80 goals-node
